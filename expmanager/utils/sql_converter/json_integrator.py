

# auto parse
def auto_json_to_graph_experiment(json_dict):
    process_original_json(json_dict)

    # tags
    normal_merge(json_dict, "Tag", "Chemical", "pk", "tags")
    normal_merge(json_dict, "Tag", "Mixture", "pk", "tags")
    normal_merge(json_dict, "Tag", "Experiment", "pk", "tags")

    # get property
    merge_prop_dict(json_dict, "PropertyName",
                    "Property", "pk", "title", "value")
    merge_prop_dict(json_dict, "PropertyName",
                    "PropertyChem", "pk", "title", "value")
    merge_prop_dict(json_dict, "PropertyName",
                    "PropertyMixture", "pk", "title", "value")

    # append properties
    append_properties(json_dict, "PropertyChem",
                      "Chemical", "level", "pk", "property")
    append_properties(json_dict, "PropertyMixture",
                      "Mixture", "level", "pk", "property")

    # Mixture
    normal_merge(json_dict, "Chemical", "MixtureComponent", "pk", "chemical")

    # appnd series data
    append_properties(json_dict, "Property", "Step", "level", "pk", "property")
    append_properties(json_dict, "MixtureComponent",
                      "Mixture", "level", "pk", "chemicals")

    # sort chemicals in a Mixture
    param_sort(json_dict, "Mixture", "chemicals")

    # step info
    normal_merge(json_dict, "Chemical", "Step", "pk", "chemical")
    normal_merge(json_dict, "Mixture", "Step", "pk", "Mixture")
    normal_merge(json_dict, "MutualKey", "Step", "pk", "mutual_key")
    normal_merge(json_dict, "Project", "Experiment", "pk", "project")

    # experiment
    append_properties(json_dict, "Step", "Experiment", "level", "pk", "step")
    param_sort(json_dict, "Experiment", "step")

    return json_dict

# ---------- util funcs------------


def process_original_json(json_dict):
    """
    preprocess original json data generated by django
    """

    for target_key in json_dict.keys():
        target_dict_list = json_dict[target_key]
        for target_dict in target_dict_list:

            # delete unnecessary keys
            if "model" in target_dict.keys():
                target_dict.pop("model")

            # extract fields
            FIELDS = "fields"
            if FIELDS in target_dict.keys():
                for k, v in target_dict[FIELDS].items():
                    target_dict[k] = v
                target_dict.pop(FIELDS)


# ------------merging functions-------------

# get property name
# merge property data
def merge_prop_dict(json_dict, son_name, parent_name, son_key, parent_key, prop_title):
    if parent_name not in json_dict:
        return
    if son_name not in json_dict:
        return

    son_list = json_dict[son_name]
    parent_list = json_dict[parent_name]

    for parent_record in parent_list:

        # print(parent_record,parent_key)
        # if parent_key not in parent_record:
        #    continue

        query_id = parent_record[parent_key]

        count = 0
        for son_record in son_list:
            # print(son_record,son_key)
            if son_record[son_key] == query_id:
                query_value = son_record[parent_key]

                parent_record[f"{query_value}"] = parent_record[prop_title]
                parent_record.pop(prop_title)
                parent_record.pop(parent_key)
                count += 1
        if count == 0:
            print("not found!")


# append property data
def append_properties(json_dict, son_name, parent_name, son_key, parent_key, prop_title):
    if parent_name not in json_dict:
        return
    if son_name not in json_dict:
        return

    son_list = json_dict[son_name]
    parent_list = json_dict[parent_name]

    for son_record in son_list:
        if son_key not in son_record:
            continue

        query_id = son_record[son_key]

        flg = False
        for parent_record in parent_list:
            checksum = parent_record[parent_key] == query_id

            if checksum:
                if prop_title not in parent_record:
                    parent_record[prop_title] = []

                parent_record[prop_title].append(son_record)
                flg = True
                break
        if not flg:
            print("not found!")

# normal merge


def normal_merge(json_dict, son_name, parent_name, son_key, parent_key):
    if parent_name not in json_dict:
        return
    if son_name not in json_dict:
        return

    son_list = json_dict[son_name]
    parent_list = json_dict[parent_name]

    for parent_record in parent_list:
        if parent_key not in parent_record.keys():
            continue
        query_id = parent_record[parent_key]

        count = 0
        nested_prop_list = []
        for son_record in son_list:
            # foreign key
            if type(query_id) is not list:
                if son_record[son_key] == query_id:
                    parent_record[parent_key] = son_record
                    count += 1
            # many to many
            else:
                for nested_query_id in query_id:
                    if son_record[son_key] == nested_query_id:
                        nested_prop_list.append(son_record)
                        count += 1

                parent_record[parent_key] = str(nested_prop_list)


def param_sort(json_dict, prop_name, target_name):
    if prop_name not in json_dict:
        return

    target_list = json_dict[prop_name]
    for target_dict in target_list:
        if target_name in target_dict.keys():
            arr = target_dict[target_name]
            arr = sorted(arr, key=lambda x: (x["order"], x['pk']))
            target_dict[target_name] = arr  # [::-1]
